ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = cntry)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradientn(values = data$value, colors = c("red","blue")) +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses") +
scale_fill_gradient(low = "red4", high = "darkblue")
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses") +
scale_fill_continuous(low = "red4", high = "darkblue")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient(low = "red4", high = "darkblue") +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient(low = "red4") +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
runApp()
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient(high = "#132B43", low = "red4") +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient(high = "#132B43", low = "red3") +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
runApp()
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient(high = "#4DD2D6", low = "red3") +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient(high = "#4DD2D6", low = "#FA9F99") +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col() +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col(width = 0.7) +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses") +
geom_text(mapping = aes(x = cntry, y = value, label = value), data = data)
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses") +
geom_text(mapping = aes(x = cntry, y = value, label = value))
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses") +
geom_text(mapping = aes(x = cntry, y = value, label = value)) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5))
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col(width = 0.7) +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
geom_text(mapping = aes(x = cntry, y = value, label = value)) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col(width = 0.7) +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
geom_text(mapping = aes(x = cntry, y = value, label = round(value,2))) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col(width = 0.7) +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
geom_text(mapping = aes(x = cntry, y = (value + 0.5), label = round(value,2))) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
ggplot(data = subset(data, var == variable), mapping = aes(x = reorder(cntry, value), y = value, fill = value)) +
geom_col(width = 0.7) +
geom_flag(y = 0, aes(country = tolower(cntry)), size = 10) +
geom_text(mapping = aes(x = cntry, y = (value + 0.25), label = round(value,2))) +
scale_fill_gradient() +
scale_y_continuous(
breaks = seq(0, variable_limits[[input$country_comparison_variable]][2], by = 1),
limits = variable_limits[[input$country_comparison_variable]]) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
ggtitle(variable_questions[[input$country_comparison_variable]]) +
xlab("Country") +
ylab("Mean value of responses")
runApp()
runApp()
input$bardata <- "AT"
bdata <- input$bardata
my_data <- mean_data_long %>% subset(cntry == bdata) %>% select(-cntry)
my_data <- my_data[, c(3, 1, 2)]
my_data$var <- as.character(my_data$var)
rownames(my_data) <- 1:20
my_data$group <- c(rep("Trust", 6),rep("Immigration", 6), rep("Satisfaction & Politics", 8))
empty_bar <- 5
to_add <- data.frame( matrix(NA, empty_bar*length(unique(my_data$group)), ncol(my_data)) )
colnames(to_add) <- colnames(my_data)
to_add$group <- rep(levels(as.factor(my_data$group)), each=empty_bar)
my_data <- rbind(my_data, to_add)
my_data <- my_data %>% arrange(group)
my_data$id <- seq(1, nrow(my_data))
# Adjust variables which have different scaling
my_data[4,"value"]  <- 3.33 * my_data[4,"value"]
my_data[5,"value"]  <- 3.33 * my_data[5,"value"]
my_data[6,"value"]  <- 3.33 * my_data[6,"value"]
my_data[14,"value"] <- 2.5  * my_data[14,"value"]
my_label_data <- my_data
nbar <- nrow(my_label_data)
my_angle <-  90 - 360 * (my_label_data$id-0.5) /nbar
my_label_data$hjust<-ifelse( my_angle < -90, 1, 0)
my_label_data$angle<-ifelse(my_angle < -90, my_angle+180, my_angle)
# prepare a data frame for base lines
base_data <- my_data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data[1,2] <- 31
grid_data[1,3] <- 34
my_data$source <- "country"
own_data <- my_data
own_data$source <- "self"
for (i in 1:3){
own_data[i,"value"] <- input[[immigration_variables[i]]] %>% as.numeric()
}
for (i in 4:6){
own_data[i,"value"] <- 3.33 * (input[[immigration_variables[i]]] %>% as.numeric())
}
for (i in 1:6){
own_data[i + 24,"value"] <- input[[trust_variables[i]]] %>% as.numeric()
}
for (i in 1:7){
own_data[i + 11,"value"] <- input[[satisfaction_variables[i]]] %>% as.numeric()
}
own_data[14,"value"] <- 2.5 * (input$frprtpl %>% as.numeric())
own_data[19,"value"] <- input$lrscale %>% as.numeric()
my_data1 <- rbind(my_data, own_data)
for (i in 1:6){
my_label_data[i,3] <- max(my_data1[which(my_data1$var == immigration_variables[i]),3])
}
for (i in 1:6){
my_label_data[i + 24,3] <- max(my_data1[which(my_data1$var == trust_variables[i]),3])
}
for (i in 1:7){
my_label_data[i + 11,3] <- max(my_data1[which(my_data1$var == satisfaction_variables[i]),3])
}
my_label_data[19,"value"] <- max(my_data1[which(my_data1$var == "lrscale"),3])
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634"))
p1
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634")) +
geom_segment(aes(x = 1, y = c(1,10)))
View(base_data)
View(grid_data)
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634")) +
geom_segment(x=1, xend=1, y = 0, y = 10)
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634")) +
geom_segment(x=1, xend=1, y = 0, yend = 10)
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634")) +
geom_segment(x=1, xend=1, y = 0, yend = 10, color = "black")
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634")) +
geom_segment(x=0.9, xend=1, y = 0, yend = 10, color = "black")
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source, color = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge", size = 0.75) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey20", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,11) +
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm"),
legend.title =
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data[1,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#B51A62",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[2,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#20655F",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
geom_segment(data=base_data[3,], aes(x = start, y = -1, xend = end, yend = -1), colour = "#1A2634",
alpha=0.8, size=2.5 , inherit.aes = FALSE ) +
labs(fill = "Answer source", col = "Variable grouping") +
scale_color_manual(name = "Variable group", values = c("#B51A62", "#20655F", "#1A2634")) +
geom_segment(x=0, y = 0, xend=1, yend = 10, color = "black")
runApp()
