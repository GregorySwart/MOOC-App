setwd("~/ESS_Data/Timing_of_Life")
shiny::runApp('ESS-app')
library(foreign)
runApp('ESS-app')
as.data.frame(read.spss("ESS-app/data/tol.sav"))
tol <- as.data.frame(read.spss("ESS-app/data/tol.sav"))
runApp('ESS-app')
runApp('ESS-app')
runApp('ESS-app')
runApp('ESS-app')
setwd("~/ESS_Data/Timing_of_Life")
runApp('ESS-app')
runApp('ESS-app')
library(rsconnect)
deployApp("ESS-data")
deployApp("ESS-app")
setwd("~")
tol <- as.data.frame(read.spss("ESS_Data/Timing_of_Life/ESS-app/data/tol.sav"))
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
deployApp("ESS_Data/Timing_of_Life/ESS-app")
runApp('ESS_Data/Timing_of_Life/ESS-app')
setwd("~/ESS_Data/Timing_of_Life/ESS-app")
runApp()
setwd("~/")
runApp('ESS_Data/Timing_of_Life/ESS-app')
showLogs()
deployApp("~/ESS_Data/Timing_of_Life/ESS-app")
rsconnect::showLogs()
setwd("~/")
runApp('ESS_Data/Timing_of_Life/ESS-app')
deployApp("ESS-app")
shiny::runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp()
runApp()
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
shiny::runApp('ESS_Data/Course-App')
shiny::runApp('ESS_Data/MOOC-App')
setwd("~/ESS_Data/MOOC-App")
runApp()
runApp()
ess_slider <- function(ID, label, text = "", min = 0, max = 10, value = 0){
fluidRow(
column(3, offset = 1,
sliderInput(inputId = ID, label = label,
min = min, max = max, value = value,
)
),
column(7,
br(),
br(),
p(text)
)
)
}
runApp()
ess_selector <- function(ID, label, text = "", choices, selected){
fluidRow(
column(3, offset = 1,
selectInput(inputId = ID, label = label,
choices = choices,
selected = selected
)
),
column(7,
br(),
p(text)
)
)
}
runApp()
runApp()
`%nin%` <- Negate(`%in%`)
ess_slider <- function(ID, label, text = "", min = 0, max = 10, value = 0){
fluidRow(
column(3, offset = 1,
sliderInput(inputId = ID, label = label,
min = min, max = max, value = value,
)
),
column(7,
br(),
br(),
p(text)
)
)
}
ess_selector <- function(ID, label, text = "", choices, selected){
fluidRow(
column(3, offset = 1,
selectInput(inputId = ID, label = label,
choices = choices,
selected = selected
)
),
column(7,
br(),
p(text)
)
)
}
runApp()
countries <- ess_data$cntry %>% unique() %>% values2labels() %>% unclass()
runApp()
countries <- ess_data$cntry %>% unique() %>% values2labels() %>% unclass()
ess_data <- as.data.frame(read_spss("ess_data.sav"))
countries <- ess_data$cntry %>% unique() %>% values2labels() %>% unclass()
runApp()
runApp()
runApp()
runApp()
#Import data
source("functions.R")
ess_data <- as.data.frame(read_spss("ess_data.sav"))
countries <- ess_data$cntry %>% unique() %>% values2labels() %>% unclass()
source("median_data.R")
removed <- c("PA", "AT", "BE", "BG", "CH", "CY", "CZ", "DE", "EE", "FI",
"FR", "GB", "HU", "IE", "IT", "NL", "NO", "PL", "RS", "SI")
removed_trust <- c()
indicators <- data.frame(list("Individual_Trust" = c(0,0),
"Institutional_Trust" = c(0,0),
"Immigration_perception" = c(0,0),
"Immigration_rejection" = c(0,0),
"Immigration_racial" = c(0,0),
"Subjective_Satisfaction" = c(0,0),
"Political_Satisfaction" = c(0,0),
"Institutional_Satisfaction" = c(0,0)),
row.names = c("EU", "PA"))
indicator_list <- list("Individual_Trust" = c("ppltrst", "pplfair", "pplhlp"),
"Institutional_Trust" = c("trstprl", "trstep", "trstlgl"),
"Immigration_Perception" = c("imbgeco", "imeuclt", "imwbcnt"),
"Immigration_Rejection" = c("impcntr"),
"Immigration_Racial" = c("imsmetn", "imdfetn"),
"Subjective_Satisfaction" = c("happy", "stflife"),
"Political_Satisfaction" = c("frprtpl", "stfdem"),
"Institutional_Satisfaction" = c("stfedu", "stfeco", "stfhlth"))
runApp()
runApp()
runApp()
runApp()
setwd("~/ESS_Data/MOOC-App")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
