setwd("~/ESS_Data/Timing_of_Life")
shiny::runApp('ESS-app')
library(foreign)
runApp('ESS-app')
as.data.frame(read.spss("ESS-app/data/tol.sav"))
tol <- as.data.frame(read.spss("ESS-app/data/tol.sav"))
runApp('ESS-app')
runApp('ESS-app')
runApp('ESS-app')
runApp('ESS-app')
setwd("~/ESS_Data/Timing_of_Life")
runApp('ESS-app')
runApp('ESS-app')
library(rsconnect)
deployApp("ESS-data")
deployApp("ESS-app")
setwd("~")
tol <- as.data.frame(read.spss("ESS_Data/Timing_of_Life/ESS-app/data/tol.sav"))
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
deployApp("ESS_Data/Timing_of_Life/ESS-app")
runApp('ESS_Data/Timing_of_Life/ESS-app')
setwd("~/ESS_Data/Timing_of_Life/ESS-app")
runApp()
setwd("~/")
runApp('ESS_Data/Timing_of_Life/ESS-app')
showLogs()
deployApp("~/ESS_Data/Timing_of_Life/ESS-app")
rsconnect::showLogs()
setwd("~/")
runApp('ESS_Data/Timing_of_Life/ESS-app')
deployApp("ESS-app")
shiny::runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp()
runApp()
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
runApp('ESS_Data/Timing_of_Life/ESS-app')
library(shinythemes)
library(shiny)
library(foreign)
library(sets)
library(dplyr)
library(haven)
library(ggplot2)
library(expss)
library(grid)
library(gridExtra)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(rgeos)
library(gdata)
library(shinyWidgets)
library(survey)
library(splitstackshape)
library(rsconnect)
library(ggflags)
library(ggthemes)
library(gridExtra)
library(ggpubr)
library(gt)
world_full <- ne_countries(scale = "medium", returnclass = "sf") %>% select(name, continent)
agg_3 <- as.data.frame(read.spss("data/agg_3.sav"))
agg_9 <- as.data.frame(read.spss("data/agg_9.sav"))
theme_set(theme_bw())
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- select(world, name, continent)
world <- subset(world, (continent %in% c("Europe","Asia","Africa")))
world1 <- world
world1$name <- recode(world$name,"Austria" ~ "AT", "Belgium" ~ "BE", "Bulgaria" ~ "BG", "Switzerland"~ "CH",
"Cyprus" ~ "CY",  "Germany" ~ "DE", "Denmark"  ~ "DK", "Estonia"    ~ "EE",
"Spain" ~ "ES",   "Finland" ~ "FI", "France" ~"FR",    "United Kingdom" ~"UK",
"Hungary"~"HU",   "Ireland"~"EI",   "Netherlands" ~"NL",
"Norway"~"NO",    "Poland"~"PL",    "Portugal"~"PT",   "Russia" ~ "RU",
"Sweden"~"SE",    "Slovenia"~"SL",  "Slovakia"~"SK",   "Ukraine"~"UA",
"Czech Rep."~"CZ",   "Italy"~"IT",     "Serbia"~"RS", "Belarus" ~ "BY",
"Lithuania" ~ "LT", "Latvia" ~ "LV", "Iceland" ~ "IS", "Morocco" ~ "MA",
"Liechtenstein" ~ "LI", "Luxembourg" ~ "LU", "Algeria" ~ "DZ",
"Tunisia" ~ "TN", "Turkey" ~ "TR", "Georgia" ~ "GE", "Azerbaijan" ~ "AZ")
world1 <- na.omit(world1)
world_2006 <- merge(world1, agg_3, by = "name")
world_2018 <- merge(world1, agg_9, by = "name")
world_2006$year <- 2006
world_2018$year <- 2018
world <- rbind(world_2006, world_2018)
world$year <- as.factor(world$year)
world$name[which(world$name == "EI")] <- "IE"
world$name[which(world$name == "ES")] <- "EA"
world$name[which(world$name == "SL")] <- "SI"
world$name[which(world$name == "UK")] <- "GB"
world$code <- tolower(world$name)
table(world1)
cro(world1)
View(world1)
cro(st_drop_geometry(world1))
table(st_drop_geometry(world1))
table(st_drop_geometry(world1$name))
table(st_drop_geometry(world1)$name)
cro(st_drop_geometry(world1)$name)
cro(st_drop_geometry(world1)$name,st_drop_geometry(world1)$continent)
`%notin%` = Negate(`%in%`)
tol <- as.data.frame(read.spss("data/tol.sav"))
setwd("~/ESS_Data/Timing_of_Life/ESS-app")
`%notin%` = Negate(`%in%`)
tol <- as.data.frame(read.spss("data/tol.sav"))
tol_full <- tol
# tol_full$cntry[which(tol_full$cntry == "EI")] <- "IE"
# tol_full$cntry[which(tol_full$cntry == "ES")] <- "EA"
# tol_full$cntry[which(tol_full$cntry == "SL")] <- "SI"
# tol_full$cntry[which(tol_full$cntry == "UK")] <- "GB"
tol <- na.omit(tol)
data <- tol_full
data_agg1 <- count(data %>% subset(ballot == 1), cntry)
data_agg1$mean <- 0
data_agg1$se <- 0
data_agg1$median <- 0
data_agg1$total_N <- 0
data_agg2 <- count(data %>% subset(ballot == 2), cntry)
data_agg2$mean <- 0
data_agg2$se <- 0
data_agg2$median <- 0
data_agg2$total_N <- 0
col_order <- c("cntry", "mean", "se", "median", "n")
data_agg1 <- data_agg1[, col_order]
View(data_agg1)
View(data_agg2)
data_agg2 <- data_agg2[, col_order]
runApp()
data_full <- tol_full
tol_full <- tol
tol <- as.data.frame(read.spss("data/tol.sav"))
tol_full <- tol
# tol_full$cntry[which(tol_full$cntry == "EI")] <- "IE"
# tol_full$cntry[which(tol_full$cntry == "ES")] <- "EA"
# tol_full$cntry[which(tol_full$cntry == "SL")] <- "SI"
# tol_full$cntry[which(tol_full$cntry == "UK")] <- "GB"
tol <- na.omit(tol)
data_full <- tol_full
data <- na.omit(data_full %>% select(cntry, ballot, tygpnt))
data_agg1 <- count(data %>% subset(ballot == 1), cntry)
data_agg1$mean <- 0
data_agg1$se <- 0
data_agg1$median <- 0
data_agg1$total_N <- 0
data_agg2 <- count(data %>% subset(ballot == 2), cntry)
data_agg2$mean <- 0
data_agg2$se <- 0
data_agg2$median <- 0
data_agg2$total_N <- 0
col_order <- c("cntry", "mean", "se", "median", "N", "Total N")
data_agg1 <- data_agg1[, col_order]
data_agg2 <- data_agg2[, col_order]
col_order <- c("cntry", "mean", "se", "median", "n", "total_N")
data_agg1 <- data_agg1[, col_order]
data_agg2 <- data_agg2[, col_order]
View(data_agg1)
View(data_agg2)
for (i in data_agg1$cntry){
design <- svydesign(ids = ~0, data = subset(data, cntry == i & ballot == 1), weights = subset(data, cntry == i & ballot == 1)$dweight)
data_agg1$mean[which(data_agg1$cntry == i)] <- svymean(subset(data, cntry == i & ballot == 1)$tygpnt, design = design)[1] %>% round(digits = 2)
data_agg1$se[which(data_agg1$cntry == i)] <- SE(svymean(subset(data, cntry == i & ballot == 1)$tygpnt, design = design)) %>% round(digits = 5)
data_agg1$median[which(data_agg1$cntry == i)] <- median(subset(data, cntry == i & ballot == 1)$tygpnt) %>% round(digits = 2)
data_agg1$total_N[which(data_agg1$cntry == i)] <- nrow(data_full %>% subset(cntry == i & ballot == 1))
}
for (i in data_agg2$cntry){
design <- svydesign(ids = ~0, data = subset(data, cntry == i & ballot == 2), weights = subset(data, cntry == i & ballot == 2)$dweight)
data_agg2$mean[which(data_agg2$cntry == i)] <- svymean(subset(data, cntry == i & ballot == 2)$tygpnt, design = design)[1] %>% round(digits = 2)
data_agg2$se[which(data_agg2$cntry == i)] <- SE(svymean(subset(data, cntry == i & ballot == 2)$tygpnt, design = design)) %>% round(digits = 5)
data_agg2$median[which(data_agg2$cntry == i)] <- median(subset(data, cntry == i & ballot == 2)$tygpnt) %>% round(digits = 2)
data_agg2$total_N[which(data_agg1$cntry == i)] <- nrow(data_full %>% subset(cntry == i & ballot == 2))
}
View(data)
data %>%
tab_cells(cntry, mean, se, n, total_N) %>%
tab_cols(total(label = "#Country| |"),
data %>%
tab_cells(cntry, mean, se, n, total_N)
2+2
2+2
data %>%
tab_cells(cntry, mean, se, n, total_N)
data %>%
tab_cells(cntry, mean, se, n, total_N) %>%
tab_pivot()
View(data)
View(data_agg1)
data_agg1 %>%
tab_cells(cntry, mean, se, n, total_N)
data_agg1 %>%
tab_cells(cntry, mean, se, n, total_N) %>%
tab_pivot()
mtcars %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_mean() %>%
tab_stat_median() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_mean() %>%
tab_stat_median() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_mean() %>%
tab_stat_median() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
tbl1
install.packages('DT')
library(DT)
expss_output_viewer(tbl1)
expss_output_viewer()
expss_output_viewer()
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_mean() %>%
tab_stat_median() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
tbl1
tableGrob(tbl1)
tbl1
tbl1
expss_output_default()
tbl1
runApp()
map <- {ggplot(data = world) +
geom_sf(data = world_full, fill = "grey50")+
geom_sf(aes(fill = world[["tygpnt_f"]])) +
ggtitle(paste("Before what age would you say a woman is generally too young to become a mother?")) +
scale_x_continuous(limits = c(-20,50)) +
scale_y_continuous(limits = c(35,70)) +
theme(axis.text.y=element_blank(),
axis.title.y = element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank(),
legend.position = c(0.04, 0.74),
panel.grid = element_blank(),)+
facet_wrap(~year, nrow = 2)+
scale_alpha_discrete(range = c(0.4,1)) +
scale_fill_brewer(palette = "Dark"
, name = "year")+
labs(fill = "Age") +
scale_fill_continuous(limits = c(min(world[["tygpnt_f"]]), max(world[["tygpnt_f"]])),
high = "#132B43", low = "#56B1F7")}
legend1 <- {ggplot(data = world
%>% na.omit(),
aes(x = .data[["tygpnt_f"]], y = reorder(name, .data[["tygpnt_f"]]), fill=.data[["tygpnt_f"]])) +
geom_bar(stat = "identity")+
coord_cartesian(xlim = c(min(na.omit(world)[["tygpnt_f"]])-1, max(na.omit(world)[["tygpnt_f"]])+1))+
scale_fill_gradient(low= "#56B1F7",high= "#132B43", space='Lab') +
geom_flag(aes(country = code, y = reorder(name, .data[["tygpnt_f"]]), x = .data[["tygpnt_f"]]), size = 6)+
ggtitle(" ")+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none")+
scale_y_discrete(breaks = NULL)+
scale_x_continuous(breaks = seq(1,50))+
theme(
panel.grid.major.x = element_line(size = 1, colour = "#0091FF")
)+
facet_wrap(~ year, ncol = 1, scales = "free")}
ggarrange(map, legend1, ncol = 2, align = "v")
runApp()
runApp()
cro(st_drop_geometry(world1)$name,st_drop_geometry(world1)$continent)
data_full <- tol_full
data <- na.omit(data_full %>% select(cntry, ballot, tygpnt))
data_agg1 <- count(data %>% subset(ballot == 1), cntry)
data_agg1$mean <- 0
data_agg1$se <- 0
data_agg1$median <- 0
data_agg1$total_N <- 0
data_agg2 <- count(data %>% subset(ballot == 2), cntry)
data_agg2$mean <- 0
data_agg2$se <- 0
data_agg2$median <- 0
data_agg2$total_N <- 0
col_order <- c("cntry", "mean", "se", "median", "n", "total_N")
data_agg1 <- data_agg1[, col_order]
data_agg2 <- data_agg2[, col_order]
for (i in data_agg1$cntry){
design <- svydesign(ids = ~0, data = subset(data, cntry == i & ballot == 1), weights = subset(data, cntry == i & ballot == 1)$dweight)
data_agg1$mean[which(data_agg1$cntry == i)] <- svymean(subset(data, cntry == i & ballot == 1)$tygpnt, design = design)[1] %>% round(digits = 2)
data_agg1$se[which(data_agg1$cntry == i)] <- SE(svymean(subset(data, cntry == i & ballot == 1)$tygpnt, design = design)) %>% round(digits = 5)
data_agg1$median[which(data_agg1$cntry == i)] <- median(subset(data, cntry == i & ballot == 1)$tygpnt) %>% round(digits = 2)
data_agg1$total_N[which(data_agg1$cntry == i)] <- nrow(data_full %>% subset(cntry == i & ballot == 1))
}
for (i in data_agg2$cntry){
design <- svydesign(ids = ~0, data = subset(data, cntry == i & ballot == 2), weights = subset(data, cntry == i & ballot == 2)$dweight)
data_agg2$mean[which(data_agg2$cntry == i)] <- svymean(subset(data, cntry == i & ballot == 2)$tygpnt, design = design)[1] %>% round(digits = 2)
data_agg2$se[which(data_agg2$cntry == i)] <- SE(svymean(subset(data, cntry == i & ballot == 2)$tygpnt, design = design)) %>% round(digits = 5)
data_agg2$median[which(data_agg2$cntry == i)] <- median(subset(data, cntry == i & ballot == 2)$tygpnt) %>% round(digits = 2)
data_agg2$total_N[which(data_agg1$cntry == i)] <- nrow(data_full %>% subset(cntry == i & ballot == 2))
}
expss_output_viewer()
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_mean() %>%
tab_stat_median() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
tbl1
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean_sd_n()
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean_sd_n() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
tbl1
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean_sd_n() %>%
tab_stat_valid_n() %>%
tab_pivot()
tbl1
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean_sd_n() %>%
tab_pivot()
tbl1
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean() %>%
tab_stat_sd
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean() %>%
tab_stat_sd() %>%
tab_stat_valid_n() %>%
tab_pivot(stat_position = "inside_rows")
tbl1
tbl1 <- data_full %>%
tab_cols(total(), cntry) %>%
tab_cells(tygpnt) %>%
tab_stat_median() %>%
tab_stat_mean() %>%
tab_stat_sd() %>%
tab_stat_valid_n() %>%
tab_pivot()
tbl1
tbl1
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('../ESS-app2')
runApp('../ESS-app2')
runApp('../ESS-app2')
runApp()
runApp('../ESS-app2')
setwd("~/ESS_Data/Timing_of_Life/ESS-app2")
runApp()
setwd("~/ESS_Data/Timing_of_Life/ESS-app")
runApp()
runApp()
runApp()
setwd("~/ESS_Data/Timing_of_Life/ESS-app2")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp('~/ESS_Data/MOOC-App')
setwd("~/ESS_Data/MOOC-App")
runApp()
setwd("~/ESS_Data/MOOC-App")
#Import data
source("functions.R")
#Import data
source("functions.R")
ess_data <- as.data.frame(read_spss("ess_data.sav"))
countries <- ess_data$cntry %>% unique() %>% values2labels() %>% unclass()
runApp()
source("median_data.R")
#Import data
source("functions.R")
ess_data <- as.data.frame(read_spss("ess_data.sav"))
countries <- ess_data$cntry %>% unique() %>% values2labels() %>% unclass()
source("median_data.R")
removed <- c("PA", "AT", "BE", "BG", "CH", "CY", "CZ", "DE", "EE", "FI",
"FR", "GB", "HU", "IE", "IT", "NL", "NO", "PL", "RS", "SI")
removed_trust <- c()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stat_variables <- c("ppltrst", "pplfair", "pplhlp", "trstprl", "trstep",
"trstlgl", "imbgeco", "imueclt", "imwbcnt", "impcntr","imsmetn", "imdfetn","happy", "stflife","frprtpl",
"stfdem","stfeco", "stfedu", "stfhlth", "lrscale")
median_data["PA","ppltrst"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stat_variables$["ppltrst"]
stat_variables["ppltrst"]
stat_variables["ppltrst",]
stat_variables["ppltrst"]
stat_variables$ppltrst
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
