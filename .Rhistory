runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
textlist  <- list(intro1 = "Welcome to the MOOC (Massive Online Open Course) App for the Centre for Social Sciences. The aim of this web app is to help visualise European attitudes towards a number of issues, using data from the ninth wave of the European Social Survey (ESS9). The three main categories are Trust, Immigration and Satisfaction. After answering some survey questions you will be able to compare your own answers to answers given by general respondents.",
intro2 = "Click on the button below to start the survey.",
radar_intro = "A radar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point. In our case, all twenty examined variables scale upwards from zero. (In the original ESS survey the three questions regarding immigration were scaled from 1 to 4. For consistency, these have been flipped and shifted so that the variables scale from 0 to 3.) For our radar charts, the higher a response is, the further away the point in the plot will be from the origin. Thus, if one gave the maximal response to each question, their results would show as a circle in the radar plots.",
radar_overview1 = "In this section you can see all variables included on a single radar plot. You can cycle throught the tabs above to see separate radar charts for the three categories.",
radar_overview2 = "On the radar plot to the left you can see the weighted median values displayed for all variables measured. A high value in a variable means the participants agreed to a greater extent, so a high trust score means the respondents are more trusting, and a high immigration score shows greater tolerance of immigrants.",
radar_overview3 = "Note: Most variables are scaled 0 to 10, with a few exceptions. Political fairness is scaled from 0 to 4, and three variables regarding immigration are scaled from 0 to 3.",
radar_trust1 = "In this section you can see a radar chart of the six variables that fall into the \"trust\" category. Three of these relate to personal trust, while the other three to trust towards institutions.",
radar_immigration1 = "In this section you can see a radar chart of the six variables that fall into the \"immigration\" category. Three of these relate to the perception towards the effect immigration has on one's country, while the other three to willingness towards letting immigrants into one's own country.",
radar_satisfaction1 = "In this section you can see a radar chart of the seven variables that fall into the \"satisfaction\" category. Four of these relate to personal satisfaction, while the other three to satisfaction with institutions.",
data1 = "",
data2 = "",
data3 = ""
)
textlist  <- list(intro1 = "Welcome to the MOOC (Massive Online Open Course) App for the Centre for Social Sciences. The aim of this web app is to help visualise European attitudes towards a number of issues, using data from the ninth wave of the European Social Survey (ESS9). The three main categories are Trust, Immigration and Satisfaction. After answering some survey questions you will be able to compare your own answers to answers given by general respondents.",
intro2 = "Click on the button below to start the survey.",
radar_intro = "A radar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point. In our case, all twenty examined variables scale upwards from zero. (In the original ESS survey the three questions regarding immigration were scaled from 1 to 4. For consistency, these have been flipped and shifted so that the variables scale from 0 to 3.) For our radar charts, the higher a response is, the further away the point in the plot will be from the origin. Thus, if one gave the maximal response to each question, their results would show as a circle in the radar plots.",
radar_overview1 = "In this section you can see all variables included on a single radar plot. You can cycle throught the tabs above to see separate radar charts for the three categories.",
radar_overview2 = "On the radar plot to the left you can see the weighted median values displayed for all variables measured. A high value in a variable means the participants agreed to a greater extent, so a high trust score means the respondents are more trusting, and a high immigration score shows greater tolerance of immigrants.",
radar_overview3 = "Note: Most variables are scaled 0 to 10, with a few exceptions. Political fairness is scaled from 0 to 4, and three variables regarding immigration are scaled from 0 to 3.",
radar_trust1 = "In this section you can see a radar chart of the six variables that fall into the \"trust\" category. Three of these relate to personal trust, while the other three to trust towards institutions.",
radar_immigration1 = "In this section you can see a radar chart of the six variables that fall into the \"immigration\" category. Three of these relate to the perception towards the effect immigration has on one's country, while the other three to willingness towards letting immigrants into one's own country.",
radar_satisfaction1 = "In this section you can see a radar chart of the seven variables that fall into the \"satisfaction\" category. Four of these relate to personal satisfaction, while the other three to satisfaction with institutions.",
data1 = "",
data2 = "",
data3 = ""
)
runApp()
runApp()
runApp()
runApp()
View(ess_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mean_data)
View(mean_data_long)
View(mean_data_long)
View(mean_data)
runApp()
bdata <- input$bardata
bardata <- "AT"
my_data <- mean_data_long %>% subset(cntry == bdata) %>% select(-cntry)
bdata <- "AT"
my_data <- mean_data_long %>% subset(cntry == bdata) %>% select(-cntry)
View(my_data)
my_data <- my_data[, c(3, 1, 2)]
my_data$var <- as.character(my_data$var)
rownames(my_data) <- 1:20
my_data$group <- c(rep("Trust", 6),rep("Immigration", 6), rep("Satisfaction & Politics", 8))
empty_bar <- 5
to_add <- data.frame( matrix(NA, empty_bar*length(unique(my_data$group)), ncol(my_data)) )
colnames(to_add) <- colnames(my_data)
to_add$group <- rep(levels(as.factor(my_data$group)), each=empty_bar)
View(to_add)
my_data <- rbind(my_data, to_add)
my_data <- my_data %>% arrange(group)
my_data$id <- seq(1, nrow(my_data))
my_label_data <- my_data
View(my_label_data)
nbar <- nrow(my_label_data)
my_angle <-  90 - 360 * (my_label_data$id-0.5) /nbar
my_label_data$hjust<-ifelse( my_angle < -90, 1, 0)
my_label_data$angle<-ifelse(my_angle < -90, my_angle+180, my_angle)
# prepare a data frame for base lines
base_data <- my_data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
View(base_data)
# prepare a data frame for grid (scales)
grid_data <- base_data
View(grid_data)
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data[1,2] <- 31
grid_data[1,3] <- 34
p1 <- ggplot(my_data, aes(x=as.factor(id), y=value, fill = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
my_data[4,var]
my_data[4,"var"]
my_data[4,"value"]
my_data[4,"value"] <- 3.33 * my_data[4,"value"]
my_data[5,"value"] <- 3.33 * my_data[5,"value"]
my_data[6,"value"] <- 3.33 * my_data[6,"value"]
my_data[14,"value"] <- 2.5 * my_data[14,"value"]
p1 <- ggplot(my_data, aes(x=as.factor(id), y=value, fill = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
my_data <- mean_data_long %>% subset(cntry == bdata) %>% select(-cntry)
my_data <- my_data[, c(3, 1, 2)]
my_data$var <- as.character(my_data$var)
rownames(my_data) <- 1:20
my_data$group <- c(rep("Trust", 6),rep("Immigration", 6), rep("Satisfaction & Politics", 8))
empty_bar <- 5
to_add <- data.frame( matrix(NA, empty_bar*length(unique(my_data$group)), ncol(my_data)) )
colnames(to_add) <- colnames(my_data)
to_add$group <- rep(levels(as.factor(my_data$group)), each=empty_bar)
my_data <- rbind(my_data, to_add)
my_data <- my_data %>% arrange(group)
my_data$id <- seq(1, nrow(my_data))
# Adjust variables which have different scaling
my_data[4,"value"] <- 3.33 * my_data[4,"value"]
my_data[5,"value"] <- 3.33 * my_data[5,"value"]
my_data[6,"value"] <- 3.33 * my_data[6,"value"]
my_data[14,"value"] <- 2.5 * my_data[14,"value"]
my_label_data <- my_data
nbar <- nrow(my_label_data)
my_angle <-  90 - 360 * (my_label_data$id-0.5) /nbar
my_label_data$hjust<-ifelse( my_angle < -90, 1, 0)
my_label_data$angle<-ifelse(my_angle < -90, my_angle+180, my_angle)
# prepare a data frame for base lines
base_data <- my_data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data[1,2] <- 31
grid_data[1,3] <- 34
p1 <- ggplot(my_data, aes(x=as.factor(id), y=value, fill = group)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
my_data$source <- "country"
own_data <- my_data
View(own_data)
own_data$source <- "self"
i = 2
own_data[i,"value"]
trust_variables
trust_variables[i]
immigration_variables
satisfaction_variables
own_data[19,"value"]
my_data1 <- rbind(my_data, own_data)
View(my_data1)
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, dodge = TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge") +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
runApp()
runApp()
runApp()
runApp()
satisfaction_variables
runApp()
which(my_data1, var == "ppltrst")
bdata <- "AT"
my_data <- mean_data_long %>% subset(cntry == bdata) %>% select(-cntry)
my_data <- my_data[, c(3, 1, 2)]
my_data$var <- as.character(my_data$var)
rownames(my_data) <- 1:20
my_data$group <- c(rep("Trust", 6),rep("Immigration", 6), rep("Satisfaction & Politics", 8))
empty_bar <- 5
to_add <- data.frame( matrix(NA, empty_bar*length(unique(my_data$group)), ncol(my_data)) )
colnames(to_add) <- colnames(my_data)
to_add$group <- rep(levels(as.factor(my_data$group)), each=empty_bar)
my_data <- rbind(my_data, to_add)
my_data <- my_data %>% arrange(group)
my_data$id <- seq(1, nrow(my_data))
# Adjust variables which have different scaling
my_data[4,"value"]  <- 3.33 * my_data[4,"value"]
my_data[5,"value"]  <- 3.33 * my_data[5,"value"]
my_data[6,"value"]  <- 3.33 * my_data[6,"value"]
my_data[14,"value"] <- 2.5  * my_data[14,"value"]
my_label_data <- my_data
nbar <- nrow(my_label_data)
my_angle <-  90 - 360 * (my_label_data$id-0.5) /nbar
my_label_data$hjust<-ifelse( my_angle < -90, 1, 0)
my_label_data$angle<-ifelse(my_angle < -90, my_angle+180, my_angle)
# prepare a data frame for base lines
base_data <- my_data %>%
group_by(group) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data[1,2] <- 31
grid_data[1,3] <- 34
my_data$source <- "country"
own_data <- my_data
own_data$source <- "self"
my_data1 <- rbind(my_data, own_data)
own_data$value <- own_data$value + 2
which(my_data1, var == "ppltrst")
which(my_data1$var == "ppltrst")
mydata[which(my_data1$var == "ppltrst")]
my_data1[which(my_data1$var == "ppltrst")]
my_data1
my_data1[which(my_data1$var == "ppltrst"),3]
my_data1 <- rbind(my_data, own_data)
my_data1[which(my_data1$var == "ppltrst"),3]
my_label_data[1,3]
my_label_data[1,3] <- max(my_data1[which(my_data1$var == "ppltrst"),3])
runApp()
max(my_data1[which(my_data1$var == "ppltrst"),3])
my_label_data[1,3] <- min(max(my_data1[which(my_data1$var == "ppltrst"),3]),6)
min(max(my_data1[which(my_data1$var == "ppltrst"),3]),6)
runApp()
max(my_data1[which(my_data1$var == "ppltrst"),3])
runApp()
my_label_data[1,3] <- max(my_data1[which(my_data1$var == "ppltrst"),3])
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge") +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
my_label_data[1,3] <- 10
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge") +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
my_label_data[1,3] <- 9
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge") +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
my_label_data[1,3] <- 8.85
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge") +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
runApp()
p1
my_label_data[1,3] <- 8.5
p1 <- ggplot(my_data1, aes(x=as.factor(id), y=value, fill = source)) +
geom_bar(stat="identity", alpha = 0.7, width=0.6, position = "dodge") +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sure barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(my_data$id),4), y = c(2, 4, 6, 8), label = c("2", "4", "6", "8") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
ylim(-5,10) +
theme_minimal() +
theme(
legend.position = c(0.8,0.8),
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar(start = 0) +
geom_text(data=my_label_data, aes(x=id, y=value+0.5, label=var, hjust=hjust), color="black",
fontface="bold",alpha=0.6, size=4, angle= my_label_data$angle, inherit.aes = FALSE ) +
geom_segment(data=base_data, aes(x = start, y = -1, xend = end, yend = -1), colour = "black",
alpha=0.8, size=1.5 , inherit.aes = FALSE )
p1
trust_variables[1]
runApp()
immigration_variables
own_data[14,3]
runApp()
runApp()
runApp()
runApp()
runApp()
max(my_data1[which(my_data1$var == "lrscale")
my_data1[which(my_data1$var == "lrscale")
my_data1[which(my_data1$var == "lrscale"),3]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
deployApp()
